AWSTemplateFormatVersion: 2010-09-09
Description: |
  A VPC and an instance to test other infrastructure inside of
Parameters:
  # Values from parameter store
  BastionImageId:
    Description: The id of the AMI to use for the bastion
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/27
      InstanceTenancy: "default"
      Tags:
        - Key: bootstrap
          Value: true

  # Public subnet

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.0.0.16/28 # Half of the VPC's ip addresses
      Tags:
        - Key: bootstrap
          Value: true
      VpcId: !Ref VPC

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: bootstrap
          Value: true
      VpcId: !Ref VPC

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: bootstrap
          Value: true

  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref IGW

  RouteIGW:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref IGW
      RouteTableId: !Ref PublicRouteTable

  # Public and private subnet

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: bootstrap
          Value: true

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  RouteNATGateway:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref PrivateRouteTable

  # Private subnet

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.0.0.0/28 # Half of the VPC's ip addresses
      Tags:
        - Key: bootstrap
          Value: true
      VpcId: !Ref VPC

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: bootstrap
          Value: true
      VpcId: !Ref VPC

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet

  Bastion:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref BastionImageId
      IamInstanceProfile: !Ref InstanceProfile
      InstanceType: "t2.nano"
      SecurityGroupIds:
        - !GetAtt SGEgressFullAccess.GroupId
      SubnetId: !Ref PrivateSubnet
      Tags:
        - Key: bootstrap
          Value: true

  SGEgressFullAccess:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows all egress traffic
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
      Tags:
        - Key: bootstrap
          Value: true
      VpcId: !Ref VPC

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceProfileRole

  InstanceProfileRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: sts:AssumeRole
      Description: Attach to an EC2 instance profile to enable SSM-ing into the instance
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: bootstrap
          Value: true
